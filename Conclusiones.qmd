# Conclusiones

En este informe se ha revisado en profundidad la definición, clasificación y utilidad de los patrones de diseño en ingeniería de software. Los patrones proporcionan un lenguaje común y un conjunto de soluciones maduras para problemas recurrentes, lo que mejora la calidad del diseño y acelera el desarrollo. La clasificación tradicional (creacionales, estructurales y comportamentales) sigue siendo válida, y los patrones GOF ejemplifican cada categoría. Además, los patrones de arquitectura (como capas y MVC) orientan la estructura macro del sistema. La investigación reciente indica que los patrones se aplican ampliamente en dominios modernos (sistemas basados en IA, microservicios y arquitecturas en nube). Sin embargo, también advierte sobre la necesidad de aplicar los patrones con criterio, evitando anti-patrones y aprovechando herramientas avanzadas de soporte. Para la práctica en C#, muchos patrones se reflejan en características del lenguaje: por ejemplo, eventos/delegados implementan Observer, y clases como StringBuilder ejemplifican Builder. Concluimos que el conocimiento profundo de patrones de diseño es esencial para diseñar software robusto y de calidad. Se recomienda a los desarrolladores y arquitectos familiarizarse con estos patrones clásicos y emergentes, adaptándolos según contexto, siempre basándose en evidencia y fuentes confiables.

La incorporación de patrones, tal como se expone en obras fundamentales como las de [@gamma1995design] y [@fowler2002patterns], no solo permite abordar problemas comunes de forma estructurada, sino que también facilita el diseño sostenible de soluciones escalables.

\newpage